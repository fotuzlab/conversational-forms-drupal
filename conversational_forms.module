<?php

/**
 * @TODO
 *  1. JS Field Validation
 *  2. Conditional fields --x
 *  3. Configuration
 *      - (option)Add cofo to webform x
 *      - (option)Add cofo to block x
 *      - Configure questions x
 *      - Configure patterns x
 *      - CF error --x
 *      - Add robotchatresponse
 *      - Prevent autofocus
 *      - CF label
 *  4. Extend for FAPI
 *  5. Add library link or download library x
 *  6. Change image.
 */

define('CONVERSATIONAL_FORMS_LIB', variable_get('conversational_forms_library_url', 
'https://conversational-form-091-0iznjsw.stackpathdns.com/conversational-form.min.js'));

require_once drupal_get_path('module', 'conversational_forms') . '/includes/webform.inc';

/**
 * Implements hook_menu().
 */
function conversational_forms_menu() {
  $items['admin/config/conversational-forms'] = array(
    'title' => 'Conversational forms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conversational_forms_admin_settings'),
    'access callback' => array(TRUE), // @TODO permission.
    'file' => 'includes/conversational_forms.admin.inc',
    'file path' => drupal_get_path('module', 'conversational_forms'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_preprocess_node().
 */
function conversational_forms_preprocess_node(&$vars) {
	// print_r('<pre>'); print_r($vars['type']); die();
  if ($vars['type'] == 'webform') {
    $cf_add = conversational_forms_is_enabled($vars['nid']);
    if ($cf_add) {
      $vars['content_attributes_array']['cf-context'] = 'cf-context';
      drupal_add_js(CONVERSATIONAL_FORMS_LIB, 'external');
    }
  }
}

function conversational_forms_preprocess_block(&$vars) {
	// print_r('<pre>'); print_r($vars); die();
  $nid = conversational_forms_nid_from_block_id($vars['block']);
  $cf_add = conversational_forms_is_enabled($nid);
	if ($cf_add) {
		$vars['content_attributes_array']['cf-context'] = 'cf-context';
	    drupal_add_js(CONVERSATIONAL_FORMS_LIB, 'external');
	}
}

function conversational_forms_form_alter(&$form, &$form_state, $form_id) {
  // print_r('<pre>'); print_r($form['submitted']); die();
  $nid = !empty($form['#node']) ? $form['#node']->nid : 0;
  $cf_add = conversational_forms_is_enabled($nid);
  $webform_id = 'webform_client_form_' . $nid;
  switch ($form_id) {
    case 'webform_configure_form':
      $form['cf'] = array(
        '#type' => 'fieldset',
        '#title' => t('Conversational forms'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['cf']['cf-add-to-webform'] = array(
        '#type' => 'checkbox',
        '#title' => t('Convert this webform to conversational form.'),
        '#default_value' => $cf_add,
      );
      $form['#submit'][] = 'conversational_forms_webform_configure_submit';
      break;

    case $webform_id:
      if ($cf_add) {
        $form['#attributes']['cf-form'] = 'cf-form';
      }
      break;
    
    default:
      # code...
      break;
  }
  
  
}

function conversational_forms_webform_configure_submit($form, &$form_state) {
  $id = 'cf-add-to-webform-' . $form_state['values']['nid'];
  variable_set($id, $form_state['values']['cf-add-to-webform']);
}

function conversational_forms_block_view_alter(&$data, $block) {
  if ($block->module == 'webform') {
    $cf_add = conversational_forms_is_enabled(conversational_forms_nid_from_block_id($block));
    if ($cf_add) {
      $cf = '<div cf-context></div>' . $data['content'];
      $data['content'] = $cf;
    }
  }
}

function conversational_forms_is_enabled($id) {
  return variable_get('cf-add-to-webform-' . $id, 0);
}

function conversational_forms_nid_from_block_id($block) {
  return str_replace('client-block-', '', $block->delta);
}

